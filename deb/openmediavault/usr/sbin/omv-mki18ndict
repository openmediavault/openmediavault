#!/bin/sh
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2021 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_I18N_JS_DICT_FILE=${OMV_I18N_JS_DICT_FILE:-"${OMV_DOCUMENTROOT_DIR}/js/omv/util/i18nDict.js"}
OMV_I18N_POPULATE_JS_DICT_FILE=${OMV_I18N_POPULATE_JS_DICT_FILE:-"yes"}
OMV_I18N_MINIFY_JS_DICT_FILE=${OMV_I18N_MINIFY_JS_DICT_FILE:-"yes"}

usage() {
	cat <<EOF
Usage:
  $(basename $0) [options]

Build the language translation dictionary.

OPTIONS:
  -h  Show this message.
  -v  Explain what is being done.

EOF
}

# Print info message.
printinfo() {
	if test x${verbose} != x ; then
		echo ${*}
	fi
}

verbose=

# Process command line arguments.
while getopts 'v?h' option
do
	case ${option} in
	v)
		verbose=yes
		;;
	h|?)
		usage >&2
		exit 0
		;;
	esac
done

# Build the translation dictionary.
cat <<EOF > ${OMV_I18N_JS_DICT_FILE}
/** This file is auto-generated by OpenMediaVault. */
OMV.util.i18nDict = {};
OMV.util.i18nDict["en"] = {}

EOF

# Convert .po files and append them to the translation dictionary?
if omv_checkyesno "${OMV_I18N_POPULATE_JS_DICT_FILE}"; then
	printinfo -n "Converting .po files ..."
	for language in $(find ${OMV_I18N_LOCALE_DIR} -maxdepth 1 -type d ! -iname ".*" -printf "%P\n"); do
		# Skip empty directories.
		[ $(find ${OMV_I18N_LOCALE_DIR}/${language} -iname \*.po | wc -l) = 0 ] && continue
		printinfo -n "."
		# Convert .po files into JSON.
		json=$(find ${OMV_I18N_LOCALE_DIR}/${language} -iname \*.po -type f -print0 | xargs -0r omv-po2json || echo "{}")
		cat <<EOF >> ${OMV_I18N_JS_DICT_FILE}
OMV.util.i18nDict["${language}"] = ${json}
EOF
	done
	printinfo ""
fi

cat <<EOF >> ${OMV_I18N_JS_DICT_FILE}
OMV.util.i18n.loadDictionary(OMV.util.i18nDict);
OMV.util.i18n.initialize();
EOF

# Compress/minify translation dictionary?
if omv_checkyesno "${OMV_I18N_MINIFY_JS_DICT_FILE}"; then
	printinfo "Compressing translation dictionary ..."
	tmpdict=$(tempfile)
	omv-jsminify --in=${OMV_I18N_JS_DICT_FILE} --out=${tmpdict}
	cp ${tmpdict} ${OMV_I18N_JS_DICT_FILE} # Copy, to keep file permissions
	rm -f ${tmpdict}
fi

exit 0
