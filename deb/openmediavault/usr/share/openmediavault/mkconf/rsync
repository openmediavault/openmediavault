#!/bin/sh
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2017 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.

# Documentation/Howto:
# http://wiki.dreamhost.com/index.php/Crontab

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_CRONSCRIPTS_DIR=${OMV_CRONSCRIPTS_DIR:-"/var/lib/openmediavault/cron.d"}
OMV_SSH_KEYS_DIR=${OMV_SSH_KEYS_DIR:-"/etc/ssh"}
OMV_SSH_KEY_PREFIX=${OMV_SSH_KEY_PREFIX:-"openmediavault-"}

OMV_RSYNC_CRONSCRIPT=${OMV_RSYNC_CRONSCRIPT:-"/etc/cron.d/openmediavault-rsync"}
OMV_RSYNC_CRONSCRIPT_MASK=${OMV_RSYNC_CRONSCRIPT_MASK:-"755"}
OMV_RSYNC_CRONSCRIPT_TEMPLATE=${OMV_RSYNC_CRONSCRIPT_TEMPLATE:-"rsync-"}
OMV_RSYNC_CRONUSER=${OMV_RSYNC_CRONUSER:-"root"}
OMV_RSYNC_LOGFILE=${OMV_RSYNC_LOGFILE:-"/var/log/rsync.log"}

# Create the rsync cron jobs. Each job is configured in a seperate script.
mkdir -p ${OMV_CRONSCRIPTS_DIR}
rm -f ${OMV_CRONSCRIPTS_DIR}/${OMV_RSYNC_CRONSCRIPT_TEMPLATE}*

# Create the scripts regardless if enabled or disabled.
xmlstarlet sel -t \
  -m "//services/rsync/jobs/job" \
    -v "uuid" -n \
  -b \
  ${OMV_CONFIG_FILE} | xmlstarlet unesc |
  while read uuid; do
	  type=$(omv_config_get "//services/rsync/jobs/job[uuid='${uuid}']/type")
	  filename="${OMV_CRONSCRIPTS_DIR}/${OMV_RSYNC_CRONSCRIPT_TEMPLATE}${uuid}"
	  runfile="/var/run/${OMV_RSYNC_CRONSCRIPT_TEMPLATE}${uuid}"
	  srcuri=""
	  desturi=""
	  destmntdir=""

	  case $type in
	  local)
		  srcsfref=$(omv_config_get "//services/rsync/jobs/job[uuid='${uuid}']/src/sharedfolderref")
		  srcuri="$(omv_get_sharedfolder_path "${srcsfref}")/"
		  srcuriarg=$(omv_escapeshellarg "${srcuri}")
		  destsfref=$(omv_config_get "//services/rsync/jobs/job[uuid='${uuid}']/dest/sharedfolderref")
		  desturi=$(omv_get_sharedfolder_path "${destsfref}")
		  desturiarg=$(omv_escapeshellarg "${desturi}")
		  destmntdir=$(omv_get_sharedfolder_mount_dir "${destsfref}")
		  ;;
	  remote)
		  mode=$(omv_config_get "//services/rsync/jobs/job[uuid='${uuid}']/mode")
		  case $mode in
		  push)
			  srcsfref=$(omv_config_get "//services/rsync/jobs/job[uuid='${uuid}']/src/sharedfolderref")
			  srcuri="$(omv_get_sharedfolder_path "${srcsfref}")/"
			  srcuriarg=$(omv_escapeshellarg "${srcuri}")
			  desturi=$(omv_config_get "//services/rsync/jobs/job[uuid='${uuid}']/dest/uri")
			  desturiarg=$(omv_escapeshellarg "${desturi}")
			  ;;
		  pull)
			  srcuri=$(omv_config_get "//services/rsync/jobs/job[uuid='${uuid}']/src/uri")
			  srcuriarg=$(omv_escapeshellarg "${srcuri}")
			  destsfref=$(omv_config_get "//services/rsync/jobs/job[uuid='${uuid}']/dest/sharedfolderref")
			  desturi=$(omv_get_sharedfolder_path "${destsfref}")
			  desturiarg=$(omv_escapeshellarg "${desturi}")
			  destmntdir=$(omv_get_sharedfolder_mount_dir "${destsfref}")
			  ;;
		  esac
		  ;;
	  esac

	  xmlstarlet sel -t -m "//services/rsync/jobs/job[uuid='${uuid}']" \
		-o "#!/bin/sh" -n \
		-o "# This configuration file is auto-generated." -n \
		-o "# WARNING: Do not edit this file, your changes will be lost." -n \
		-o ". /usr/share/openmediavault/scripts/helper-functions" -n \
		-o "cleanup() {" -n \
		-o "  omv_kill_children \$\$" -n \
		-o "  rm -f ${runfile}" -n \
		-o "  exit" -n \
		-o "}" -n \
		-o "[ -e ${runfile} ] && exit 1" -n \
		-i "type[. = 'local'] or mode[. = 'pull']" \
		  -o "if ! omv_is_mounted \"${destmntdir}\" ; then" -n \
		  -o "    echo \"Destination storage device <${destmntdir}> not mounted!\"" -n \
		  -o "    exit 1" -n \
		  -o "fi" -n \
		   -o "if ! omv_is_mounted \"${srcmntdir}\" ; then" -n \
		  -o "    echo \"Source storage device <${srcmntdir}> not mounted!\"" -n \
		  -o "    exit 1" -n \
		  -o "fi" -n \
		-b \
		-o "trap cleanup 0 1 2 5 15" -n \
		-o "touch ${runfile}" -n \
		-o "echo \"Please wait, syncing <${srcuri}> to <${desturi}> ...\n\"" -n \
		-i "authentication = 'password'" \
		  -i "string-length(password) > 0" -v "concat('env RSYNC_PASSWORD=\"',password,'\" ')" -b \
		-b \
		-i "authentication = 'pubkey'" \
		  -o "eval \$(ssh-agent) >/dev/null" -n \
		  -v "concat('ssh-add ${OMV_SSH_KEYS_DIR}/${OMV_SSH_KEY_PREFIX}',sshcertificateref,' >/dev/null')" -n \
		-b \
		-o "rsync --verbose --log-file=\"${OMV_RSYNC_LOGFILE}\"" \
		-i "authentication = 'pubkey'" \
		  -v "concat(' --rsh \"ssh -p ',sshport,'\"')" \
		-b \
		-i "recursive = '1'" -o " --recursive" -b \
		-i "times = '1'" -o " --times" -b \
		-i "compress = '1'" -o " --compress" -b \
		-i "archive = '1'" -o " --archive" -b \
		-i "delete = '1'" -o " --delete" -b \
		-i "quiet = '1'" -o " --quiet" -b \
		-i "perms = '1'" -o " --perms" -b \
		-i "acls = '1'" -o " --acls" -b \
		-i "xattrs = '1'" -o " --xattrs" -b \
		-i "dryrun = '1'" -o " --dry-run" -b \
		-i "partial = '1'" -o " --partial" -b \
		-i "string-length(extraoptions) > 0" -v "concat(' ',extraoptions)" -b \
		-o " ${srcuriarg} ${desturiarg} & wait \$!" \
		${OMV_CONFIG_FILE} | xmlstarlet unesc > ${filename}
	  chmod ${OMV_RSYNC_CRONSCRIPT_MASK} ${filename}
  done

# Create the cron script itself.
xmlstarlet sel -t \
  -o "SHELL=/bin/sh" -n \
  -o "PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin" -n \
  -o "# m h dom mon dow user    command" -n \
  -m "//services/rsync/jobs/job[enable='1']" \
	  -i "everynminute[. = '1']" -v "concat('*/',minute,' ')" -b \
	  -i "everynminute[. = '0']" -v "concat(minute,' ')" -b \
	  -i "everynhour[. = '1']" -v "concat('*/',hour,' ')" -b \
	  -i "everynhour[. = '0']" -v "concat(hour,' ')" -b \
	  -i "everyndayofmonth[. = '1']" -v "concat('*/',dayofmonth,' ')" -b \
	  -i "everyndayofmonth[. = '0']" -v "concat(dayofmonth,' ')" -b \
	  -v "concat(month,' ',dayofweek,' ')" \
	  -o "${OMV_RSYNC_CRONUSER} " \
	  -v "concat('${OMV_CRONSCRIPTS_DIR}/${OMV_RSYNC_CRONSCRIPT_TEMPLATE}',uuid)" \
	  -i "sendemail[. = '0']" \
		-o " >/dev/null 2>&1" \
	  -b \
	  -i "sendemail[. = '1']" \
		-i "string-length(comment) > 0" \
		  -v "concat(' | mail -E -s \"Rsync - ',translate(comment,'\

',' '),'\" -a \"From: Cron Daemon <root>\" root >/dev/null 2>&1')" \
		-b \
	  -b \
	  -n \
  -b \
  ${OMV_CONFIG_FILE} | xmlstarlet unesc > ${OMV_RSYNC_CRONSCRIPT}
chmod 644 ${OMV_RSYNC_CRONSCRIPT}
